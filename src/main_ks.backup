// If your target is limited in memory remove this macro to save 10K RAM

#include <training_kws_inference.h>
#define ONCOMPUTER 0
#include "nn.h"

static Layer* l1;  
static Layer* l2;

static u32 memoryUsed = 0;
static f32 lr = 0.1f;

struct train_data{
    M input;
    M target;
};

struct train_data_cnn{
    M3 input;
    M target;
};

#define INPUT_SIZE 16000
#define OUTPUT_SIZE 4

// CNN DEFINES
#define SIZE 28
#define CHANNELS 1
#define KERNEL_SIZE 3
#define OUT_CHANNELS 1

static bool debug_nn = false; // Set this to true to see e.g. features generated from the raw signal


/** Audio buffers, pointers and selectors */
typedef struct {
    int16_t buffer[EI_CLASSIFIER_RAW_SAMPLE_COUNT];
    uint8_t buf_ready;
    uint32_t buf_count;
    uint32_t n_samples;
} inference_t;

static inference_t inference;

typedef uint8_t scaledType;

static scaledType microphone_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
    numpy::int16_to_float(&inference.buffer[offset], out_ptr, length);
    return 0;
}
void setup(){
    // Serial.begin(9600);
    // InitMemory(1024 * 260);

    // l1 = Layer::create(4,32);
    // l2 = Layer::create(32,3);

    Serial.begin(9600);
    InitMemory(1024 * 260);

    l1 = Layer::create(650,25);
    l2 = Layer::create(25,4);

    memoryUsed = MemoryArena.Used;

    pinMode(LEDR, OUTPUT);
    pinMode(LEDG, OUTPUT);
    pinMode(LEDB, OUTPUT);

    digitalWrite(LEDR, HIGH);
    digitalWrite(LEDG, HIGH);
    digitalWrite(LEDB, HIGH);

    // put your setup code here, to run once:
    randomSeed(0);

    initNetworkModel();
    digitalWrite(LED_BUILTIN, LOW);    // OFF   
}

void read_weights(Layer* l) {
    //Serial.println("Receiving weights..");
    float* weights = l->w.data;

    for (uint16_t i = 0; i < l->w.rows * l->w.cols; ++i) {
        //Serial.write('n');
        while (Serial.available() < 4);

        char bytes[4];
        Serial.readBytes(bytes, 4);
        weights[i] = *reinterpret_cast<float*>(bytes);
    }

    // for (uint16_t i = 0; i < l->w.rows * l->w.cols; ++i) {
    //     Serial.print(l->w.data[i]);
    //     Serial.print(" ");
    // }
    // Serial.print(l->w.std());
}

void send_weights(Layer *l){
    float* weights = l->w.data;

    for (uint16_t i = 0; i < l->w.rows * l->w.cols; ++i) {
        Serial.write('n');
        sendFloat(weights[i]);
    }
}

void send_bias(Layer *l){
    float* weights = l->b.data;

    for (uint16_t i = 0; i < l->b.rows * l->b.cols; ++i) {
        Serial.write('n');
        sendFloat(weights[i]);
    }
}

void read_bias(Layer* l) {
    //Serial.println("Receiving bias..");
    float* bias = l->b.data;
    for (uint16_t i = 0; i < l->b.rows * l->b.cols; ++i) {
        //Serial.write('n');
        while (Serial.available() < 4);

        char bytes[4];
        Serial.readBytes(bytes, 4);
        bias[i] = *reinterpret_cast<float*>(bytes);
    }

    // for (uint16_t i = 0; i < l->b.rows * l->b.cols; ++i) {
    //     Serial.print(l->b.data[i]);
    //     Serial.print(" ");
    // }
    // Serial.print(l->b.std());
}

void read_layer_weights(Layer* l){
    read_bias(l);
    read_weights(l);
}

void read_weights(Conv2D* l) {
    //Serial.println("Receiving weights..");
    float* weights = l->kernels.data;
    for (uint16_t i = 0; i < l->kernels.d1 * l->kernels.d2 * l->kernels.d3 * l->kernels.d4; ++i) {
        //Serial.write('n');
        while (Serial.available() < 4);

        char bytes[4];
        Serial.readBytes(bytes, 4);
        weights[i] = *reinterpret_cast<float*>(bytes);
    }

    // for (uint16_t i = 0; i < l->w.rows * l->w.cols; ++i) {
    //     Serial.print(l->w.data[i]);
    //     Serial.print(" ");
    // }
    // Serial.print(l->w.std());
}

void sendLayerMetaData(Layer* l){
    sendInt(-1); // Dense layer
    sendInt(l->w.rows);
    sendInt(l->w.cols);
}

void sendLayerMetaData(MaxPooling* l){
    sendInt(-2); // Max pool layer
}

void read_bias(Conv2D* l) {
    //Serial.println("Receiving bias..");
    float* bias = l->bias.data;
    for (uint16_t i = 0; i < l->bias.rows * l->bias.cols; ++i) {
        Serial.write('n');
        while (Serial.available() < 4);

        char bytes[4];
        Serial.readBytes(bytes, 4);
        bias[i] = *reinterpret_cast<float*>(bytes);
    }

    // for (uint16_t i = 0; i < l->b.rows * l->b.cols; ++i) {
    //     Serial.print(l->b.data[i]);
    //     Serial.print(" ");
    // }
    // Serial.print(l->b.std());
}

void sendLayerMetaData(Conv2D* l){
    sendInt(-3); // CNN
    sendInt(l->kernels.d1);
    sendInt(l->kernels.d2);
    sendInt(l->kernels.d3);
    sendInt(l->kernels.d4);
}

void initNetworkModel(){
    Serial.println("Start receiving model");
    char signal;
    do {
        signal = Serial.read();
        Serial.println(memoryUsed);
    } while(signal != 's'); // s -> START

    Serial.println("start");
    Serial.write("i");
    // How many layers?
    sendInt(2);
    sendLayerMetaData(l1);
    sendLayerMetaData(l2);

    // TODO : Change to read_weights(l1): this will read bias and weights within the same function.
    read_bias(l1);
    read_weights(l1);

    read_bias(l2);
    read_weights(l2);
}

// train_data receive_sample(){
//     train_data data = {};
//     data.input = M::zeros(1,INPUT_SIZE);
//     data.target = M::zeros(1, OUTPUT_SIZE);

//     f32* input = data.input.data;
//     f32* target = data.target.data;

//     for(u16 i=0;i<INPUT_SIZE;++i){
//         Serial.write('n');
//         while (Serial.available() < 4);

//         char bytes[4];
//         Serial.readBytes(bytes, 4);
//         input[i] = *reinterpret_cast<float*>(bytes);
        
//     }

//     // byte ref[2];
//     // for(int i = 0; i < EI_CLASSIFIER_RAW_SAMPLE_COUNT; i++) {
//     //     Serial.write('n');
//     //     while(Serial.available() < 2) {}
//     //     Serial.readBytes(ref, 2);
//     //     inference.buffer[i] = 0;
//     //     inference.buffer[i] = (ref[1] << 8) | ref[0];
//     //     // Serial.write(1);
//     // }
    
//     for(u16 i=0;i<OUTPUT_SIZE;++i){
//         Serial.write('n');
//         while (Serial.available() < 4);

//         char bytes[4];
//         Serial.readBytes(bytes, 4);
//         target[i] = *reinterpret_cast<float*>(bytes);
//     }

//     return data;
// }

train_data receive_sample(){
    train_data data = {};
    //data.input = M::zeros(1,INPUT_SIZE);
    data.target = M::zeros(1, OUTPUT_SIZE);

    f32* input = data.input.data;
    f32* target = data.target.data;

    // for(u16 i=0;i<INPUT_SIZE;++i){
    //     Serial.write('n');
    //     while (Serial.available() < 4);

    //     char bytes[4];
    //     Serial.readBytes(bytes, 4);
    //     input[i] = *reinterpret_cast<float*>(bytes);
        
    // }

    byte ref[2];
    for(int i = 0; i < EI_CLASSIFIER_RAW_SAMPLE_COUNT; i++) {
        //Serial.write('n');
        while(Serial.available() < 2) {}
        Serial.readBytes(ref, 2);
        inference.buffer[i] = 0;
        inference.buffer[i] = (ref[1] << 8) | ref[0];
        // Serial.write(1);
    }
    
    for(u16 i=0;i<OUTPUT_SIZE;++i){
        Serial.write('n');
        while (Serial.available() < 4);

        char bytes[4];
        Serial.readBytes(bytes, 4);
        target[i] = *reinterpret_cast<float*>(bytes);
    }

    return data;
}

// M receive_sample_inference(){
//     M data = M::zeros(1,1);
//     f32* input = data.data;

//     byte ref[2];
//     for(int i = 0; i < EI_CLASSIFIER_RAW_SAMPLE_COUNT; i++) {
//         Serial.write('n');
//         while(Serial.available() < 2) {}
//         Serial.readBytes(ref, 2);
//         inference.buffer[i] = 0;
//         inference.buffer[i] = (ref[1] << 8) | ref[0];
//         // Serial.write(1);
//     }


//     // for(u16 i=0;i<INPUT_SIZE;++i){
//     //     Serial.write('n');
//     //     while (Serial.available() < 4);

//     //     char bytes[4];
//     //     Serial.readBytes(bytes, 4);
//     //     input[i] = *reinterpret_cast<float*>(bytes);
//     // }

//     return data;
// }

train_data_cnn receive_sample_cnn(u32 height, u32 width, u32 channels, u32 output_size){
    train_data_cnn data = {};
    data.input = M3::zeros(height, width, channels);
    data.target = M::zeros(1, output_size);

    f32* input = data.input.data;
    f32* target = data.target.data;

    for(u32 i=0;i<height*width*channels;++i){
        Serial.write('n');
        while (Serial.available() < 4);

        char bytes[4];
        Serial.readBytes(bytes, 4);
        input[i] = *reinterpret_cast<float*>(bytes);
    }
    
    for(u16 i=0;i<output_size;++i){
        Serial.write('n');
        while (Serial.available() < 4);

        char bytes[4];
        Serial.readBytes(bytes, 4);
        target[i] = *reinterpret_cast<float*>(bytes);
    }

    return data;
}

// M receive_sample_inference(){
//     M data = M::zeros(1,4);
//     f32* input = data.data;

//     // byte ref[2];
//     // for(int i = 0; i < EI_CLASSIFIER_RAW_SAMPLE_COUNT; i++) {
//     //     Serial.write('n');
//     //     while(Serial.available() < 2) {}
//     //     Serial.readBytes(ref, 2);
//     //     inference.buffer[i] = 0;
//     //     inference.buffer[i] = (ref[1] << 8) | ref[0];
//     //     // Serial.write(1);
//     // }

//     for(u16 i=0;i<INPUT_SIZE;++i){
//         Serial.write('n');
//         while (Serial.available() < 4);

//         char bytes[4];
//         Serial.readBytes(bytes, 4);
//         input[i] = *reinterpret_cast<float*>(bytes);
//     }

//     return data;
// }

// M3 receive_sample_inference_cnn(u32 height, u32 width, u32 channels){
//     M3 data = M3::zeros(height, width, channels);
//     f32* input = data.data;

//     for(u32 i=0;i<height* width* channels;++i){
//         Serial.write('n');
//         while (Serial.available() < 4);

//         char bytes[4];
//         Serial.readBytes(bytes, 4);
//         input[i] = *reinterpret_cast<float*>(bytes);
//     }

//     return data;
// }

float readFloat() {
    byte res[4];
    while(Serial.available() < 4) {}
    for (int n = 0; n < 4; n++) {
        res[n] = Serial.read();
    }
    return *(float *)&res;
}

void sendM(M arg)
{
    for(u32 i=0;i<arg.cols * arg.rows;++i){
        Serial.write('n');
        sendFloat(arg.data[i]);
    }
}

void sendInferenceResult(M arg, f32 loss)
{
    for(u32 i=0;i<arg.cols * arg.rows;++i){
        Serial.write('n');
        sendFloat(arg.data[i]);
    }

    Serial.write('n');
    sendFloat(loss);
}

void sendFloat (float arg)
{
    // get access to the float as a byte-array:
    byte * data = (byte *) &arg; 

    // write the data to the serial
    Serial.write (data, sizeof (arg));
}

void sendInt (int arg)
{
    // get access to the float as a byte-array:
    byte * data = (byte *) &arg; 

    // write the data to the serial
    Serial.write (data, sizeof (arg));
}

/*f32 train(M input, M target){
    // l1->resetGradients();
    // l2->resetGradients();
    // l3->resetGradients();

    M a = Sigmoid(l1->forward(input));
    M b = Sigmoid(l2->forward(a));
    M o = Softmax(l3->forward(b));

    M e3 = M::MatMul(CrossEntropyPrime(target, o), SoftmaxPrime(o));
    M e2 = l3->backward(e3) * SigmoidPrime(b);
    M e1 = l2->backward(e2) * SigmoidPrime(a);

    l3->dw = l3->getDelta(e3, b);
    l2->dw = l2->getDelta(e2, a);
    l1->dw = l1->getDelta(e1, input);

    l3->db = e3;
    l2->db = e2;
    l1->db = e1;

    l3->UpdateWeights(lr);
    l2->UpdateWeights(lr);
    l1->UpdateWeights(lr);

    // l1->UpdateWeights(e1, input, lr);
    // l2->UpdateWeights(e2, a, lr);
    // l3->UpdateWeights(e3, b, lr);

    return CrossEntropy(target, o);
}

M predict(M input){
    M a = Sigmoid(l1->forward(input));
    M b = Sigmoid(l2->forward(a));
    M o = Softmax(l3->forward(b));

    return o;
}

*/

f32 train(M input, M target){
    signal_t signal;
    signal.total_length = EI_CLASSIFIER_RAW_SAMPLE_COUNT;
    signal.get_data = &microphone_audio_signal_get_data;
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);

    EI_IMPULSE_ERROR r = get_one_second_features(&signal, &features_matrix, debug_nn);
    if (r != EI_IMPULSE_OK) {
        Serial.println("ERR: Failed to get features ("+String(r));
    }
    
    // l1->resetGradients();
    // l2->resetGradients();

    input.data = features_matrix.buffer;
    input.rows = 1;
    input.cols = 650;
    M a = Sigmoid(l1->forward(input));
    M b = Softmax(l2->forward(a));

    M d2 = M::MatMul(CrossEntropyPrime(target, b), SoftmaxPrime(b));
    // // //M d2 = MsePrime(y[i], b) * SigmoidPrime(b);
    M d1 = l2->backward(d2) * SigmoidPrime(a);
    
    // l2->setDelta(d2, a);
    // l1->setDelta(d1, input);
    l2->dw = l2->getDelta(d2, a);
    l2->db = d2;

    l1->dw = l1->getDelta(d1, input);
    l1->db = d1;

    l2->UpdateWeights(lr);
    l1->UpdateWeights(lr);

    // calculate error
    // return 0.002344;

    return CrossEntropy(target, b);
}

M predict(M input, M target, float &loss){
    // forward propagation
    signal_t signal;
    signal.total_length = EI_CLASSIFIER_RAW_SAMPLE_COUNT;
    signal.get_data = &microphone_audio_signal_get_data;
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);

    EI_IMPULSE_ERROR r = get_one_second_features(&signal, &features_matrix, debug_nn);
    if (r != EI_IMPULSE_OK) {
        Serial.println("ERR: Failed to get features ("+String(r));
    }
    
    // l1->resetGradients();
    // l2->resetGradients();

    input.data = features_matrix.buffer;
    input.rows = 1;
    input.cols = 650;
    M a = Sigmoid(l1->forward(input));
    M b = Softmax(l2->forward(a));

    loss = CrossEntropy(target, b);
    return b;
}


// f32 train(M input, M target){
//     // signal_t signal;
//     // signal.total_length = EI_CLASSIFIER_RAW_SAMPLE_COUNT;
//     // signal.get_data = &microphone_audio_signal_get_data;
//     // ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);

//     // EI_IMPULSE_ERROR r = get_one_second_features(&signal, &features_matrix, debug_nn);
//     // if (r != EI_IMPULSE_OK) {
//     //     Serial.println("ERR: Failed to get features ("+String(r));
//     // }
    
//     // // l1->resetGradients();
//     // // l2->resetGradients();

//     // input.data = features_matrix.buffer;
//     // input.rows = 1;
//     // input.cols = 650;
//     M a = Sigmoid(l1->forward(input));
//     M b = Softmax(l2->forward(a));

//     M d2 = M::MatMul(CrossEntropyPrime(target, b), SoftmaxPrime(b));
//     // // //M d2 = MsePrime(y[i], b) * SigmoidPrime(b);
//     M d1 = l2->backward(d2) * SigmoidPrime(a);
    
//     // l2->setDelta(d2, a);
//     // l1->setDelta(d1, input);
//     l2->dw = l2->getDelta(d2, a);
//     l2->db = d2;

//     l1->dw = l1->getDelta(d1, input);
//     l1->db = d1;

//     l2->UpdateWeights(lr);
//     l1->UpdateWeights(lr);

//     // calculate error
//     // return 0.002344;

//     return CrossEntropy(target, b);
// }

// M predict(M input){
//     // forward propagation
//     // signal_t signal;
//     // signal.total_length = EI_CLASSIFIER_RAW_SAMPLE_COUNT;
//     // signal.get_data = &microphone_audio_signal_get_data;
//     // ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);

//     // EI_IMPULSE_ERROR r = get_one_second_features(&signal, &features_matrix, debug_nn);
//     // if (r != EI_IMPULSE_OK) {
//     //     Serial.println("ERR: Failed to get features ("+String(r));
//     // }
    
//     // // l1->resetGradients();
//     // // l2->resetGradients();

//     // input.data = features_matrix.buffer;
//     // input.rows = 1;
//     // input.cols = 650;
//     M a = Sigmoid(l1->forward(input));
//     M b = Softmax(l2->forward(a));

//     return b;
// }

// f32 train(M3 input, M target){
//     // cnv1->resetGradients();
//     // pl1->resetGradients();
//     // l0->resetGradients();
//     // l1->resetGradients();

    
//     M3 aa = Sigmoid(cnv1->convolve2D(input));
//     M3 bb = pl1->forward(aa);

//     M flatten(bb.data, 1, bb.d1*bb.d2*bb.d3);
    
//     M a = Sigmoid(l0->forward(flatten));
//     M c = Softmax(l1->forward(a));

//     // M d2 = M::MatMul(CrossEntropyPrime(target, c), SoftmaxPrime(c));
//     // M d1 = l1->backward(d2) * SigmoidPrime(a);
//     // M d0 = l0->backward(d1);

//     // l1->dw = l1->getDelta(d2, a);
//     // l1->db = d2;

//     // l0->dw = l0->getDelta(d1, flatten);
//     // l0->db = d1;

//     // M3 dcnv = M3(d0.data, bb.d1, bb.d2, bb.d3); 
//     // M3 bpl2 = pl1->backward(dcnv) * SigmoidPrime(aa);
//     // cnv1->backward_conv(input, bpl2);


//     return CrossEntropy(target, c);
// }

// M predict(M3 input){
//     M3 aa = Sigmoid(cnv1->convolve2D(input));
//     M3 bb = pl1->forward(aa);
//     M flatten(bb.data, 1, bb.d1*bb.d2*bb.d3);
//     M a = Sigmoid(l0->forward(flatten));
//     M o = Softmax(l1->forward(a));
//     return o;
// }

void loop(){
    if(Serial.available() > 0){
        char inByte = Serial.read();
        if(inByte == 't'){
            // train_data_cnn sample = receive_sample_cnn(SIZE,SIZE,CHANNELS, 10);
            train_data sample = receive_sample();
            f32 error = train(sample.input, sample.target);
            sendFloat(error);

        } else if(inByte == 'p'){
            train_data sample = receive_sample();

            //M input = receive_sample_inference();
            float loss = 0.0;
            M output = predict(sample.input, sample.target, loss);
            sendInferenceResult(output, loss);
            MemoryArena.Used = memoryUsed;
        } else if(inByte == 'f'){
            // START FEDERATED LEARNING
        } else if(inByte == 'g'){
            send_weights(l1);
            send_bias(l1);
            send_weights(l2);
            send_bias(l2);
        } else if(inByte == 'r'){
            // ALWAYS READ BIAS FIRST!!!
            read_bias(l1);
            read_weights(l1);

            read_bias(l2);
            read_weights(l2);
        }
    }
    MemoryArena.Used = memoryUsed;
}
